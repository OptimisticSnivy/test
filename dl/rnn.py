# -*- coding: utf-8 -*-
"""rnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OUIyy1tAx7naGz7sgZEtMkHkBtaj7qU_
"""

# Step 1: Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

# Step 2: Load the dataset
dataset = pd.read_csv('Google_Stock_Price.csv')  # make sure you have the dataset
prices = dataset['Open'].values
prices = prices.reshape(-1, 1)

# Step 3: Normalize the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_prices = scaler.fit_transform(prices)

# Step 4: Create training sequences
def create_sequences(data, window_size):
    X = []
    y = []
    for i in range(window_size, len(data)):
        X.append(data[i-window_size:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

window_size = 60
X, y = create_sequences(scaled_prices, window_size)

# Reshape X for RNN [samples, timesteps, features]
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Step 5: Build the RNN model
model = Sequential([
    SimpleRNN(units=50, activation='tanh', return_sequences=False, input_shape=(window_size, 1)),
    Dense(1)
])

# Step 6: Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 7: Train the model
model.fit(X, y, epochs=20, batch_size=32)

# Step 8: Predict on the training data
predicted_prices = model.predict(X)
predicted_prices = scaler.inverse_transform(predicted_prices)

# Step 9: Visualize
real_prices = prices[window_size:]

plt.figure(figsize=(14,5))
plt.plot(real_prices, color='blue', label='Real Google Stock Price')
plt.plot(predicted_prices, color='red', label='Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()